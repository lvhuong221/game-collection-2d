//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""PongGameplay"",
            ""id"": ""a292aea7-ec7d-4994-b004-6aa67aeb1dae"",
            ""actions"": [
                {
                    ""name"": ""Player1Move"",
                    ""type"": ""Value"",
                    ""id"": ""91dde657-cf15-477e-bc64-8a22c478fa1d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player2Move"",
                    ""type"": ""Value"",
                    ""id"": ""8b72979f-74cb-4dd2-91f1-4d42a3982243"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""62006178-6406-41b4-8834-67c6a037edc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f2f4303f-69d2-414c-a1d4-fe8f6e2a7a33"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7af2546f-d8e6-49b1-9250-5519f5d096df"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""49af41cd-58b2-4931-899f-a8d7afcc9d7a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1bcb55a5-0737-44b3-9b2a-aacca1dce6e8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ef65ade3-28b8-4c8b-a647-506584fd9195"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""699bec8d-619b-4798-92d5-c3a32598c439"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cf9334ee-0aa5-4724-b0bc-70632f44cef2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e4f4fd5e-db25-4469-962f-86a7d132d7fc"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""50a1e9c2-4be7-472b-9100-10712f7babf6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a94d2aea-f6c1-45a1-922b-b32ac8133242"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8d0bdea2-a726-46d1-9051-2b6dfeb005bc"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0fedd41-199c-45a6-a67e-e894f2b430b3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ShootToMove"",
            ""id"": ""d3ad7d9f-3ff4-488b-8546-26da8e243dae"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""bef081fa-75ef-4486-8a71-fb340c22c116"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""0beeebbe-e92e-4c0d-a4de-f2c8715398a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""747ea7e7-d512-4fa4-96a2-bf3229884cd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e6d29fc1-18e8-4e39-917a-0b55f5a2c2b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7b0544b-5712-41e9-8c48-ea8fddd6fbfa"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7739fe6-dc5b-4754-bd13-7f47a74121f5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2dffbed-ec0d-4858-812f-a2065e321203"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15df3581-dc67-4fed-9927-f3362b1b3e21"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95c967f4-ff75-40fb-9d70-b0147c257d6e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PongGameplay
        m_PongGameplay = asset.FindActionMap("PongGameplay", throwIfNotFound: true);
        m_PongGameplay_Player1Move = m_PongGameplay.FindAction("Player1Move", throwIfNotFound: true);
        m_PongGameplay_Player2Move = m_PongGameplay.FindAction("Player2Move", throwIfNotFound: true);
        m_PongGameplay_Pause = m_PongGameplay.FindAction("Pause", throwIfNotFound: true);
        // ShootToMove
        m_ShootToMove = asset.FindActionMap("ShootToMove", throwIfNotFound: true);
        m_ShootToMove_MousePosition = m_ShootToMove.FindAction("MousePosition", throwIfNotFound: true);
        m_ShootToMove_Fire = m_ShootToMove.FindAction("Fire", throwIfNotFound: true);
        m_ShootToMove_Reset = m_ShootToMove.FindAction("Reset", throwIfNotFound: true);
        m_ShootToMove_Pause = m_ShootToMove.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PongGameplay
    private readonly InputActionMap m_PongGameplay;
    private List<IPongGameplayActions> m_PongGameplayActionsCallbackInterfaces = new List<IPongGameplayActions>();
    private readonly InputAction m_PongGameplay_Player1Move;
    private readonly InputAction m_PongGameplay_Player2Move;
    private readonly InputAction m_PongGameplay_Pause;
    public struct PongGameplayActions
    {
        private @GameInput m_Wrapper;
        public PongGameplayActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1Move => m_Wrapper.m_PongGameplay_Player1Move;
        public InputAction @Player2Move => m_Wrapper.m_PongGameplay_Player2Move;
        public InputAction @Pause => m_Wrapper.m_PongGameplay_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PongGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PongGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IPongGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_PongGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PongGameplayActionsCallbackInterfaces.Add(instance);
            @Player1Move.started += instance.OnPlayer1Move;
            @Player1Move.performed += instance.OnPlayer1Move;
            @Player1Move.canceled += instance.OnPlayer1Move;
            @Player2Move.started += instance.OnPlayer2Move;
            @Player2Move.performed += instance.OnPlayer2Move;
            @Player2Move.canceled += instance.OnPlayer2Move;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPongGameplayActions instance)
        {
            @Player1Move.started -= instance.OnPlayer1Move;
            @Player1Move.performed -= instance.OnPlayer1Move;
            @Player1Move.canceled -= instance.OnPlayer1Move;
            @Player2Move.started -= instance.OnPlayer2Move;
            @Player2Move.performed -= instance.OnPlayer2Move;
            @Player2Move.canceled -= instance.OnPlayer2Move;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPongGameplayActions instance)
        {
            if (m_Wrapper.m_PongGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPongGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_PongGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PongGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PongGameplayActions @PongGameplay => new PongGameplayActions(this);

    // ShootToMove
    private readonly InputActionMap m_ShootToMove;
    private List<IShootToMoveActions> m_ShootToMoveActionsCallbackInterfaces = new List<IShootToMoveActions>();
    private readonly InputAction m_ShootToMove_MousePosition;
    private readonly InputAction m_ShootToMove_Fire;
    private readonly InputAction m_ShootToMove_Reset;
    private readonly InputAction m_ShootToMove_Pause;
    public struct ShootToMoveActions
    {
        private @GameInput m_Wrapper;
        public ShootToMoveActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_ShootToMove_MousePosition;
        public InputAction @Fire => m_Wrapper.m_ShootToMove_Fire;
        public InputAction @Reset => m_Wrapper.m_ShootToMove_Reset;
        public InputAction @Pause => m_Wrapper.m_ShootToMove_Pause;
        public InputActionMap Get() { return m_Wrapper.m_ShootToMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootToMoveActions set) { return set.Get(); }
        public void AddCallbacks(IShootToMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_ShootToMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShootToMoveActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IShootToMoveActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IShootToMoveActions instance)
        {
            if (m_Wrapper.m_ShootToMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShootToMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_ShootToMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShootToMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShootToMoveActions @ShootToMove => new ShootToMoveActions(this);
    public interface IPongGameplayActions
    {
        void OnPlayer1Move(InputAction.CallbackContext context);
        void OnPlayer2Move(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IShootToMoveActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
